# -*- coding: utf-8 -*-
"""EDA_visuals.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V92xGUMUTeifB9SeeePr27t0dr-N41wE

# **Script for EDA**
"""

# Commented out IPython magic to ensure Python compatibility.
#importing necessary modules
import numpy as np
import pandas as pd
import seaborn as sns 
import matplotlib.pyplot as plt 
from IPython.display import display
import re

import warnings
warnings.filterwarnings('ignore')
# %matplotlib inline

df= pd.read_csv("Faculty_Database.csv", encoding = 'utf-8')

#dropping irrelevant columns
df.drop(['E-Mail','Telephone Number (off)'], axis=1, inplace= True)

"""### Department-wise division of the faculty"""

#plotting a pie plot to demonstrate
def Department_count():
    Department = df.groupby('Department ').count()['Faculty Name ']
    Department.plot(kind='pie')

"""### Comparision between Designation of the professor and department-wise division"""

def PHD(string):
  if string == 'nan' or string == 'NIL':
    return 0
# Giving a score of 0 to missing values
# Split the function about comma if it exists
  x = re.split(',',string) 
  y = 0
  z = 0
  for t in x:
    temp = re.findall(r'\d+', t)
    res = list(map(int, temp))
    if "Supervision" in t:
      y = res[0]
    else:
      z = res[0]
# 0.5 score to under supervision and 1 to completed
  return 0.5*y + z
df['No. of PhD Supervised / Guided (source: IIT-R Website) '].astype(str).apply(PHD)

#list of all designations
designation_list = df['Designation '].tolist()
designation_list =  np.array(designation_list)
designation_list = list(np.unique(designation_list)[:-1])

#list of departments in dataset
df = df[pd.notnull(df['Designation '])]
dept_list = df['Department '].tolist()
z =  np.array(dept_list)

#bar-plot for each department showing designation distribution of the professors vs the gender
gk = df.groupby('Department ')
def department_by_designation(groups):
    for group in groups:
        plt.figure(figsize=(9, 6))
        plt.title(group)
        ax=sns.countplot(x = 'Designation ' , data = gk.get_group(group), hue= 'Gender')
        plt.show()

"""### Gender distribution among the faculty"""

def gender_count():
    gender= df.groupby('Gender').count()['Faculty Name ']
    gender.plot(kind='pie',autopct='%1.0f%%')

"""## Gender distribution among departments"""

def gender(groups):
    for group in groups:
        plt.figure(figsize=(9, 6))
        plt.title(group)
        ax=sns.countplot(x = 'Gender' , data = gk.get_group(group))
        plt.show()

"""### Categorising the 'Year of graduation' of Professors followed by a graphical analysis"""

#separating them into 5-year periods 
df["Year of Completion "] = df["Year of Completion "].map(lambda x: x - (x%5))

#countplot representing the number of profs who graduated between the specified year categories 
#and comparing them gender-wise
def Year_of_completion_genderwise():
    sns.countplot(data=df, x="Year of Completion ", hue="Gender")

"""### Country-wise distribution of professors"""

#code for EDA of the column
def country_smoother(x):
    y = str(x)
    y = y.strip()
    # for UK I need to introduce new measures as U.K.
    if re.search("U.K.",y):
        y = "UK"
    if re.search("U.S.A.",y):
        y = "USA"
    return y

def country_distribution(df):
    df_tech = df
    df_tech["Country "] = df_tech["Country "].apply(country_smoother)
    country= df.groupby('Country ' ).count()['Faculty Name ']
    country.pop("nan")
    country.plot(kind='bar')

"""### Number of supervisers and awarded PhDs """

def phd_vs_department(groups):
    phd_count = []
    for dept in groups:
        phd_count.append(df[df['Department '] == dept]['No. of PhD Supervised / Guided (source: IIT-R Website) '].count())
    plt.bar(groups,height = phd_count)

def phd_vs_designation(groups):
    plt.figure(figsize = (15,10))
    phd_count = []
    for dept in groups:
        phd_count.append(df[df['Designation '] == dept]['No. of PhD Supervised / Guided (source: IIT-R Website) '].count())
    plt.bar(groups,height = phd_count)
    plt.show()