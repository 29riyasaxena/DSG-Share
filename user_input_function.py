# -*- coding: utf-8 -*-
"""dsg x share.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Me-SXuHLxLvKn78dNsNCBhNzHnNaEayb
"""

#importing necessary modules
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt 
from sklearn.metrics.pairwise import cosine_similarity
import regex as re
from sklearn.feature_extraction.text import TfidfVectorizer

def cleaning(s):
    s = re.sub(r'[^\w\s]', '', s)
    return s.lower()

def Ranking(s):
    df = pd.read_csv("Faculty_Database.csv", encoding = 'utf-8')
    cols = ['Ph.D.  (Research Area)', 'Specialization/Interest', 'Area of Expertise ']
    df['feature'] = df[cols].apply(lambda row: '_'.join(row.values.astype(str)), axis=1)
    for i in range(len(df)):
        df.loc[i,'feature'] = cleaning(df.loc[i,'feature'])
    tf = TfidfVectorizer(stop_words='english')
    y = tf.fit_transform(df['feature']).toarray()
    x = tf.transform([cleaning(s)]).toarray()
    tf_sim = cosine_similarity(y,x)
    sorted = np.argsort(tf_sim,axis=0).reshape(len(df))[::-1]
    data = df.iloc[sorted,:].reset_index()
    return data.drop(['index','feature'],axis=1)

def Designation(df):
  designation_categories = ['Professor Emeritus ','Professor of Practice ','Retired Faculty ','HAG - Professor ','Professor ','Associate Professor','Assistant Professor ']
  df["Designation "] = pd.Categorical(df.loc[:,"Designation "], categories= designation_categories)
  return df.sort_values(by="Designation ")

def search():
   area_of_s = input('Enter area of specialization: \n')
   
   dept_input = input('Preferred department : \n')
   country_input = input('Preferred country  (if any): \n')
   sort_input = input('Do you want to sort according to designation?(y/n) \n')
   
   if sort_input == "y" :
     if dept_input and country_input :
       return Designation(Ranking(area_of_s).loc[(Ranking(area_of_s)['Department '].str.lower() == str(dept_input).lower()) & (Ranking(area_of_s)['Country '].str.lower() == str(country_input).lower())])
     elif dept_input :
       return Designation(Ranking(area_of_s).loc[(Ranking(area_of_s)['Department ']).str.lower() == str(dept_input).lower()])
     elif country_input:
       return Designation(Ranking(area_of_s).loc[(Ranking(area_of_s)['Country ']).str.lower() == str(country_input).lower()])
     else:
       return Designation(Ranking(area_of_s))
   else :
     if dept_input and country_input :
       return (Ranking(area_of_s).loc[(Ranking(area_of_s)['Department '].str.lower() == str(dept_input).lower()) & (Ranking(area_of_s)['Country '].str.lower() == str(country_input).lower())])
     elif dept_input :
       return(Ranking(area_of_s).loc[(Ranking(area_of_s)['Department ']).str.lower() == str(dept_input).lower()])
     elif country_input:
       return(Ranking(area_of_s).loc[(Ranking(area_of_s)['Country ']).str.lower() == str(country_input).lower()])
     else:
       return(Ranking(area_of_s))

print(search())